// مسئله: تعداد روش‌های بالا رفتن از پله‌ها
// صورت مسئله:
// شما در حال بالا رفتن از یک پلکان هستید که n پله دارد. در هر مرحله می‌توانید ۱ پله یا ۲ پله بالا بروید. چند روش مجزا برای رسیدن به بالای پلکان وجود دارد؟

// راه‌حل:
// این مسئله یک مسئله دنباله فیبوناچی است، زیرا:

// تعداد روش‌های رسیدن به پله n = تعداد روش‌های رسیدن به پله n-1 (با برداشتن ۱ پله آخر) + تعداد روش‌های رسیدن به پله n-2 (با برداشتن ۲ پله آخر).

// می‌توان آن را با برنامه‌نویسی پویا (Dynamic Programming) بهینه حل کرد.

function climbStairs(n: number): number {
  if (n === 1) return 1;

  let dp = new Array(n + 1);
  dp[1] = 1; // فقط یک روش برای ۱ پله
  dp[2] = 2; // دو روش برای ۲ پله

  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }

  return dp[n];
}

// تست نمونه‌ها
console.log(climbStairs(2)); // 2
console.log(climbStairs(3)); // 3
console.log(climbStairs(5)); // 8
